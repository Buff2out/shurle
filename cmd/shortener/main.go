package main

/*
Сейчас я вернулся в свой же этот старый проект
(его уже можно в каком то плане назвать легаси :D) это после академа в 50 дней
(
	на время академа я кстати окончил стартовый курс базовый по го
	и многое теперь понимаю лучше
)
и понимаю что его нужно рефакторить.
Особенно структуру проекта. Но боюсь к дедлайнам 3-го спринта не успеть.
Думаю рефакторинг сделаю на следующих спринтах
мой план:
1) app можно в целом удалить. internal'а хватает
2) во флагах и энвах переменные в структуре Settings
	не соответствуют названиям в переменных средах - поправить легко, главное не забыть

3) все функции с приставкой MW внутри пакета ginsetrout (боже мой ну и название я сделал)
	можно вынести в файл handlers той же папки и соответственно пакета.
	А то получается что это самый большой файл

4) Самое критичное - отсутствие автотестов.
	(они есть только в пакете pages со времён первых инкрементов в далёком начале обучения)
	Но у меня с этим самого плохо.
	Так как я совсем не привык их писать (автотесты). Но чтож потихоньку придётся
	возможно привыкать их писать изучать структуры
	принимающие и возвращающие особенно со сторонних либ

5) context - вот это конечно жёсткая палка в колёса мне.
	Я понимаю, что эта штука обязательна, но из за того что я в
	одном инкременте решил ради изучения нового выбрать фраймворк gin, а не chi, а в джине
	контекст уже встроен и немного отличается, то мне тут придётся покумекать ещё как.
	Возможно разберусь после первого выпускного проекта

6) ну и в процессе разработки инкремента-11 встанет вопрос интерфейсов.
	В любом случае бизнес логика одна и та же. Будь то хранение shortener в бд или в файле,
	поэтому тут как раз кстати я прошёл базовый курс.
	И теперь понимаю как их применить на практике.
	но пока что кровь из носу надо успеть как то закрыть 11, 12, 13 и я
	обойдусь без них временно
	вместо этого просто пока что продублирую отдельные хендлеры
	для запросов при подключенной БД.
	потом покумекаю как бы "переехать" на интерфейсы чтобы при подключённой бд или
	не подключённой бд не менялась сильно бизнес логика. интерфейсы мне в помощь

7) а ну и касаемо логики с записью в файл а не в бд ради обратной совместимости
	с первыми инкрементами.
	у меня тут есть глобальная переменная links (что на практике обычно плохо)
	где я храню все ссылки по ключу (сгенерированному набору символов,
		буду называть его хеш, хоть это и не совсем так).
	Так вот.
	Она хороша, но есть нюанс. Она (links) относительно хороша до тех пор,
	пока количество сокращённых ссылок не превысит размер оперативной памяти.
	Поэтому нужно как то извлекать из файла - но это отдельный разговор.
	Оптимизм мой заключается в том, что по логике мы будем искать
	хэш построчно до тех пор пока не найдём.
	это и переделает логику с моей старой костылявой логикой с глобальной переменной links
*/

import (
	"github.com/Buff2out/shurle/internal"
	lg "github.com/Buff2out/shurle/internal/app/config/logging"
	"github.com/Buff2out/shurle/internal/app/transport/ginsetrout"
	"go.uber.org/zap"
)

func main() {

	/* TODO
	Здесь будут расписаны в дальнейшем задачи для себя
	итак инкремент 11
	по сути задач тут две:
	1) Переделать GetSettings (или скорее SetupRouter под новую задачу записи в бд)
	2) Добавить функционал взятия данных из бд и добавления записи в бд
	*/
	sugar, logger := lg.GetSugaredLogger()
	// это нужно добавить, если логер буферизован
	// в данном случае не буферизован, но привычка хорошая
	defer func(logger *zap.Logger) {
		err := logger.Sync()
		if err != nil {
			panic("cannot close zap's sugared logger")
		}
	}(logger)
	settings := internal.GetSettings(sugar)
	r := ginsetrout.SetupRouter(settings, sugar)
	err := r.Run(settings.Socket)
	if err != nil {
		panic(err)
	}
}
